/*
Copyright (c) 2025 RealTimeChris (Chris M.)

This file is part of software offered under a restricted-use license to a designated Licensee,
whose identity is confirmed in writing by the Author.

License Terms (Summary):
- Exclusive, non-transferable license for internal use only.
- Redistribution, sublicensing, or public disclosure is prohibited without written consent.
- Full ownership remains with the Author.
- License may terminate if unused for [X months], if materially breached, or by mutual agreement.
- No warranty is provided, express or implied.

Full license terms are provided in the LICENSE file distributed with this software.

Signed,
RealTimeChris (Chris M.)
2025
*/
#pragma once

#include <nihilus-incl/common/config.hpp>

namespace nihilus {

	struct cpu_properties {
	  protected:
		static constexpr static_aligned_const thread_count_raw{ @NIHILUS_THREAD_COUNT@ull };
		static constexpr static_aligned_const has_avx2_raw{ @NIHILUS_HAS_AVX2@ull };
		static constexpr static_aligned_const has_avx512_raw{ @NIHILUS_HAS_AVX512@ull };
		static constexpr static_aligned_const has_neon_raw{ @NIHILUS_HAS_NEON@ull };
		static constexpr static_aligned_const has_sve2_raw{ @NIHILUS_HAS_SVE2@ull };
		static constexpr static_aligned_const l1_cache_size_raw{ @NIHILUS_CPU_L1_CACHE_SIZE@ull };
		static constexpr static_aligned_const l2_cache_size_raw{ @NIHILUS_CPU_L2_CACHE_SIZE@ull };
		static constexpr static_aligned_const l3_cache_size_raw{ @NIHILUS_CPU_L3_CACHE_SIZE@ull };
		static constexpr static_aligned_const cpu_arch_index_raw{ @NIHILUS_CPU_ARCH_INDEX@ull };
		static constexpr static_aligned_const cpu_alignment_raw{ @NIHILUS_CPU_ALIGNMENT@ull };
		
	  public:
		static constexpr const uint64_t& thread_count{ *thread_count_raw };
		static constexpr const uint64_t& has_avx2{ *has_avx2_raw };
		static constexpr const uint64_t& has_avx512{ *has_avx512_raw };
		static constexpr const uint64_t& has_neon{ *has_neon_raw };
		static constexpr const uint64_t& has_sve2{ *has_sve2_raw };
		static constexpr const uint64_t& l1_cache_size{ *l1_cache_size_raw };
		static constexpr const uint64_t& l2_cache_size{ *l2_cache_size_raw };
		static constexpr const uint64_t& l3_cache_size{ *l3_cache_size_raw };
		static constexpr const uint64_t& cpu_arch_index{ *cpu_arch_index_raw };
		static constexpr const uint64_t& cpu_alignment{ *cpu_alignment_raw };
	};
}
